from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram import F, Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from smth228.app import keyboards as kb
from smth228.app.middleware import LoggingMiddleware


router = Router()

router.message.middleware(LoggingMiddleware())


class Reg(StatesGroup):
    name = State()
    number = State()


# –∏
# —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å
# –∞–Ω–µ–∫–¥–æ—Ç(–Ω–∞–ø–∏—à–∏
# '—Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç')
@router.message(CommandStart())
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ üòé. –Ø —É–º–µ—é –∑–∞ —Ç–æ–±–æ–π –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∏ –Ω–∞–∑—ã–≤–∞—Ç—å –∞–π–¥–∏ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ.",
                         reply_markup=kb.settings)
    await message.answer(text="–ï—Å–ª–∏ –Ω–∞–π–¥–µ—à—å –æ—à–∏–±–∫–∏ –∂–º–∏ ----> /report", reply_markup=kb.main)


@router.message(F.text.lower() == "—Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç")
async def joke(message: Message):
    if message.from_user.username:
        await message.answer(
            f'–ò–¥—É—Ç –ø–æ –ª–µ—Å—É –î—é–π–º–æ–≤–æ—á–∫–∞, –ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞ –∏ x—É–µcoc \n–î—é–π–º–æ–≤–æ—á–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç: "–Ø —Å–∞–º–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è –Ω–∞ –ó–µ–º–ª–µ. '
            '\n–ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç: "–Ø —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –Ω–∞ —Å–≤–µ—Ç–µ." \nX—É–µcoc –≥–æ–≤–æ—Ä–∏—Ç: "–Ø –±–æ–ª—å—à–µ –≤—Å–µ—Ö –æ—Ç—Å–æ—Å–∞–ª xy—ë–≤." '
            '\n–ò–¥—É—Ç –æ–Ω–∏, –∏–¥—É—Ç, –∏ –∑–∞—Ö–æ–¥—è—Ç –≤ –î–æ–º –ü—Ä–∞–≤–¥—ã. \n–î—é–π–º–æ–≤–æ—á–∫–∞ –≤ —Å–ª–µ–∑–∞—Ö –≤—ã–±–µ–≥–∞–µ—Ç –∏ –≥–æ–≤–æ—Ä–∏—Ç: "–ù—É –∫–∞–∫ —Ç–∞–∫? –Ø –Ω–µ —Å–∞–º–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è. –ú–µ–Ω—å—à–µ –º–µ–Ω—è –º–∞–ª—å—á–∏–∫-—Å-–ø–∞–ª—å—á–∏–∫."'
            '\n –ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞ —Ç–æ–∂–µ –≤—ã–±–µ–≥–∞–µ—Ç –≤ —Å–ª–µ–∑–∞—Ö –∏ –∫—Ä–∏—á–∏—Ç: "–û, –±–æ–∂–µ, —è –Ω–µ —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è. –ö—Ä–∞—Å–∏–≤–µ–µ –º–µ–Ω—è –°–ø—è—â–∞—è –ö—Ä–∞—Å–∞–≤–∏—Ü–∞."'
            f'\n–í—ã—Ö–æ–¥–∏—Ç –∑–ª–æ–π —Öyec–æ—Å –∏ –≥–æ–≤–æ—Ä–∏—Ç: "Cy–∫a, –∞ –∫—Ç–æ —Ç–∞–∫–æ–π @{message.from_user.username}?!"')
    else:
        await message.answer(
            f'–ò–¥—É—Ç –ø–æ –ª–µ—Å—É –î—é–π–º–æ–≤–æ—á–∫–∞, –ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞ –∏ x—É–µcoc \n–î—é–π–º–æ–≤–æ—á–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç: "–Ø —Å–∞–º–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è –Ω–∞ –ó–µ–º–ª–µ. '
            '\n–ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç: "–Ø —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –Ω–∞ —Å–≤–µ—Ç–µ." \nX—É–µcoc –≥–æ–≤–æ—Ä–∏—Ç: "–Ø –±–æ–ª—å—à–µ –≤—Å–µ—Ö –æ—Ç—Å–æ—Å–∞–ª xy—ë–≤." '
            '\n–ò–¥—É—Ç –æ–Ω–∏, –∏–¥—É—Ç, –∏ –∑–∞—Ö–æ–¥—è—Ç –≤ –î–æ–º –ü—Ä–∞–≤–¥—ã. \n–î—é–π–º–æ–≤–æ—á–∫–∞ –≤ —Å–ª–µ–∑–∞—Ö –≤—ã–±–µ–≥–∞–µ—Ç –∏ –≥–æ–≤–æ—Ä–∏—Ç: "–ù—É –∫–∞–∫ —Ç–∞–∫? –Ø –Ω–µ —Å–∞–º–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è. –ú–µ–Ω—å—à–µ –º–µ–Ω—è –º–∞–ª—å—á–∏–∫-—Å-–ø–∞–ª—å—á–∏–∫."'
            '\n –ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞ —Ç–æ–∂–µ –≤—ã–±–µ–≥–∞–µ—Ç –≤ —Å–ª–µ–∑–∞—Ö –∏ –∫—Ä–∏—á–∏—Ç: "–û, –±–æ–∂–µ, —è –Ω–µ —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è. –ö—Ä–∞—Å–∏–≤–µ–µ –º–µ–Ω—è –°–ø—è—â–∞—è –ö—Ä–∞—Å–∞–≤–∏—Ü–∞."'
            f'\n–í—ã—Ö–æ–¥–∏—Ç –∑–ª–æ–π —Öyec–æ—Å –∏ –≥–æ–≤–æ—Ä–∏—Ç: "Cy–∫a, –∞ –∫—Ç–æ —Ç–∞–∫–æ–π –∞–≤—Ç–æ—Ä —ç—Ç–æ–≥–æ –±–æ—Ç–∞?!"')


@router.message(Command("reg"))
async def reg_st1(message: Message, state: FSMContext):
    await state.set_state(Reg.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")


@router.message(Reg.name)
async def reg_st2(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg.number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


@router.message(Reg.number)
async def reg_st3(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    data = await state.get_data()
    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. \n–ò–º—è: {data["name"]} \n–ù–æ–º–µ—Ä: {data["number"]}")
    await state.clear()


@router.message(F.text & ~F.text.startswith("/"))
async def echo(message: Message):
    await message.answer(message.text)


@router.message(~F.text & ~F.photo)
async def no_media(message: Message):
    await message.answer("–Ω–µ —à–ª–∏ –≥–∏—Ñ–∫–∏, —Å—Ç–∏–∫–µ—Ä—ã, —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ))")


@router.message(Command("report"))
async def report_cmd(message: Message):
    await message.answer("–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–ª—å–Ω–æ, –Ω–µ –ø—ã—Ç–∞–π—Å—è")


@router.callback_query(F.data == "aga")
async def aga(callback: CallbackQuery):
    await callback.answer("–ø–æ–Ω—è—Ç–Ω–æ", show_alert=True)
    await callback.message.edit_text("–ó–∞—á–µ–º –Ω–∞–∂–∞–ª?", reply_markup=kb.asd)


@router.callback_query(F.data == "zxc")
async def aga(callback: CallbackQuery):
    await callback.answer("–ø–æ–Ω—è—Ç–Ω–æ", show_alert=True)


@router.message(F.photo)
async def get_photo_id(message: Message):
    await message.answer_photo(photo="AgACAgIAAxkBAAICCmjJNxwYvTHaNNlZAAHBwFJMT5foSQACSfsxG22lSUojJUFhbHmERwEAAwIAA3kAAzYE", caption=f"id —Ñ–æ—Ç–æ: {message.photo[-1].file_id}")