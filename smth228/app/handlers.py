from aiogram.filters import CommandStart, Command
from aiogram.types import Message
# CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
# from smth228.app import keyboards as kb
from smth228.app.middleware import LoggingMiddleware
from aiogram import Router, F, Bot
from aiogram.types import PollAnswer


router = Router()

router.message.middleware(LoggingMiddleware())


class Reg(StatesGroup):
    name = State()
    number = State()


class Poll(StatesGroup):
    question = State()
    options = State()


# –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—Ä–æ—Å
last_poll_id: str | None = None
voters: set[str] = set()


# –∏
# —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å
# –∞–Ω–µ–∫–¥–æ—Ç(–Ω–∞–ø–∏—à–∏
# '—Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç')
# reply_markup=kb.settings
# reply_markup=kb.main
@router.message(CommandStart())
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ üòé. –Ø —É–º–µ—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ç–≤–æ–∏–º–∏ –æ–ø—Ä–æ—Å–∞–º–∏ –∏ —Ä–µ–∞–∫—Ü–∏—è–º–∏ "
                         "–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.–ï—Å–ª–∏ –Ω–∞–π–¥–µ—à—å –æ—à–∏–±–∫–∏ –∂–º–∏ ----> /report")
# await message.answer("–ï—Å–ª–∏ –Ω–∞–π–¥–µ—à—å –æ—à–∏–±–∫–∏ –∂–º–∏ ----> /report")


# @router.message(F.text.lower() == "—Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç")
# async def joke(message: Message):
#     if message.from_user.username:
#         await message.answer(
#             f'–ò–¥—É—Ç –ø–æ –ª–µ—Å—É –î—é–π–º–æ–≤–æ—á–∫–∞, –ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞ –∏ x—É–µcoc \n–î—é–π–º–æ–≤–æ—á–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç: "–Ø —Å–∞–º–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è –Ω–∞ –ó–µ–º–ª–µ. '
#             '\n–ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç: "–Ø —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –Ω–∞ —Å–≤–µ—Ç–µ." \nX—É–µcoc –≥–æ–≤–æ—Ä–∏—Ç: "–Ø –±–æ–ª—å—à–µ –≤—Å–µ—Ö –æ—Ç—Å–æ—Å–∞–ª xy—ë–≤." '
#             '\n–ò–¥—É—Ç –æ–Ω–∏, –∏–¥—É—Ç, –∏ –∑–∞—Ö–æ–¥—è—Ç –≤ –î–æ–º –ü—Ä–∞–≤–¥—ã. \n–î—é–π–º–æ–≤–æ—á–∫–∞ –≤ —Å–ª–µ–∑–∞—Ö –≤—ã–±–µ–≥–∞–µ—Ç –∏ –≥–æ–≤–æ—Ä–∏—Ç: "–ù—É –∫–∞–∫ —Ç–∞–∫? –Ø –Ω–µ —Å–∞–º–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è. –ú–µ–Ω—å—à–µ –º–µ–Ω—è –º–∞–ª—å—á–∏–∫-—Å-–ø–∞–ª—å—á–∏–∫."'
#             '\n –ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞ —Ç–æ–∂–µ –≤—ã–±–µ–≥–∞–µ—Ç –≤ —Å–ª–µ–∑–∞—Ö –∏ –∫—Ä–∏—á–∏—Ç: "–û, –±–æ–∂–µ, —è –Ω–µ —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è. –ö—Ä–∞—Å–∏–≤–µ–µ –º–µ–Ω—è –°–ø—è—â–∞—è –ö—Ä–∞—Å–∞–≤–∏—Ü–∞."'
#             f'\n–í—ã—Ö–æ–¥–∏—Ç –∑–ª–æ–π —Öyec–æ—Å –∏ –≥–æ–≤–æ—Ä–∏—Ç: "Cy–∫a, –∞ –∫—Ç–æ —Ç–∞–∫–æ–π @{message.from_user.username}?!"')
#     else:
#         await message.answer(
#             f'–ò–¥—É—Ç –ø–æ –ª–µ—Å—É –î—é–π–º–æ–≤–æ—á–∫–∞, –ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞ –∏ x—É–µcoc \n–î—é–π–º–æ–≤–æ—á–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç: "–Ø —Å–∞–º–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è –Ω–∞ –ó–µ–º–ª–µ. '
#             '\n–ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç: "–Ø —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –Ω–∞ —Å–≤–µ—Ç–µ." \nX—É–µcoc –≥–æ–≤–æ—Ä–∏—Ç: "–Ø –±–æ–ª—å—à–µ –≤—Å–µ—Ö –æ—Ç—Å–æ—Å–∞–ª xy—ë–≤." '
#             '\n–ò–¥—É—Ç –æ–Ω–∏, –∏–¥—É—Ç, –∏ –∑–∞—Ö–æ–¥—è—Ç –≤ –î–æ–º –ü—Ä–∞–≤–¥—ã. \n–î—é–π–º–æ–≤–æ—á–∫–∞ –≤ —Å–ª–µ–∑–∞—Ö –≤—ã–±–µ–≥–∞–µ—Ç –∏ –≥–æ–≤–æ—Ä–∏—Ç: "–ù—É –∫–∞–∫ —Ç–∞–∫? –Ø –Ω–µ —Å–∞–º–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è. –ú–µ–Ω—å—à–µ –º–µ–Ω—è –º–∞–ª—å—á–∏–∫-—Å-–ø–∞–ª—å—á–∏–∫."'
#             '\n –ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞ —Ç–æ–∂–µ –≤—ã–±–µ–≥–∞–µ—Ç –≤ —Å–ª–µ–∑–∞—Ö –∏ –∫—Ä–∏—á–∏—Ç: "–û, –±–æ–∂–µ, —è –Ω–µ —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è. –ö—Ä–∞—Å–∏–≤–µ–µ –º–µ–Ω—è –°–ø—è—â–∞—è –ö—Ä–∞—Å–∞–≤–∏—Ü–∞."'
#             f'\n–í—ã—Ö–æ–¥–∏—Ç –∑–ª–æ–π —Öyec–æ—Å –∏ –≥–æ–≤–æ—Ä–∏—Ç: "Cy–∫a, –∞ –∫—Ç–æ —Ç–∞–∫–æ–π –∞–≤—Ç–æ—Ä —ç—Ç–æ–≥–æ –±–æ—Ç–∞?!"')


async def is_admin(message: Message, bot: Bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º —á–∞—Ç–∞"""
    member = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
    return member.status in ("administrator", "creator")


@router.message(F.text == "/poll")
async def create_poll1(message: Message, state: FSMContext):
    """–°–æ–∑–¥–∞—ë–º –æ–ø—Ä–æ—Å"""
    global last_poll_id
    last_poll_id = set()
    await state.set_state(Poll.question)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞.")


@router.message(Poll.question)
async def create_poll2(message: Message, state: FSMContext, bot: Bot):
    """–°–æ–∑–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞"""
    if not await is_admin(message, bot):
        await message.answer("–±–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∞")  # —É–±—Ä–∞—Ç—å –ø–æ—Ç–æ–º –Ω–µ –∑–∞–±—É–¥—å
        return
    await state.update_data(question=message.text)
    await state.set_state(Poll.options)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é(–±–æ–ª–µ–µ 2).")


@router.message(Poll.options)
async def create_poll3(message: Message, state: FSMContext, bot: Bot):
    """–°–æ–∑–¥–∞—ë–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ–ø—Ä–æ—Å–∞"""
    global last_poll_id, voters
    if not await is_admin(message, bot):
        await message.answer("–±–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∞")  # —É–±—Ä–∞—Ç—å –ø–æ—Ç–æ–º –Ω–µ –∑–∞–±—É–¥—å
        return
    if len(message.text.split(",")) < 2:
        await message.answer("–ö–∞–∫—É—é-—Ç–æ —Ö—Ä–µ–Ω—å —Ç—ã –≤–≤–µ–ª, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞–ø–∏—Å–∞–Ω–æ –∂–µ.")
        return
    await state.update_data(options=message.text.split(","))
    poll_data = await state.get_data()
    poll_msg = await bot.send_poll(
        chat_id=message.chat.id,
        question=poll_data["question"],
        options=poll_data["options"],
        is_anonymous=False
    )
    await state.clear()

    last_poll_id = poll_msg.poll.id
    voters = set()


@router.poll_answer()
async def handle_poll_answer(poll_answer: PollAnswer):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö"""
    global voters
    if poll_answer.poll_id == last_poll_id:
        user_identifier = poll_answer.user.username or str(poll_answer.user.id)
        voters.add(user_identifier)


@router.message(F.text == "/stats")
async def poll_stats(message: Message, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –æ–ø—Ä–æ—Å—É"""
    global last_poll_id, voters

    if not last_poll_id:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")
        return

    total = await bot.get_chat_member_count(message.chat.id)
    total -= 1
    not_voted = total - len(voters)

    percent_voted = (len(voters) / total) * 100 if total else 0
    percent_not = (not_voted / total) * 100 if total else 0

    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: {len(voters)} —á–µ–ª–æ–≤–µ–∫ ({percent_voted:.1f}%) ‚Üí {", ".join(voters)}\n"
        f"–ù–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: {not_voted} —á–µ–ª–æ–≤–µ–∫ ({percent_not:.1f}%)")


# @router.message(Command("reg"))
# async def reg_st1(message: Message, state: FSMContext):
#     await state.set_state(Reg.name)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
#
#
# @router.message(Reg.name)
# async def reg_st2(message: Message, state: FSMContext):
#     await state.update_data(name=message.text)
#     await state.set_state(Reg.number)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
#
#
# @router.message(Reg.number)
# async def reg_st3(message: Message, state: FSMContext):
#     await state.update_data(number=message.text)
#     data = await state.get_data()
#     await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. \n–ò–º—è: {data["name"]} \n–ù–æ–º–µ—Ä: {data["number"]}")
#     await state.clear()
#
#
# @router.message(F.text & ~F.text.startswith("/"))
# async def echo(message: Message):
#     await message.answer(message.text)
#
#
# @router.message(~F.text & ~F.photo)
# async def no_media(message: Message):
#     await message.answer("–Ω–µ —à–ª–∏ –≥–∏—Ñ–∫–∏, —Å—Ç–∏–∫–µ—Ä—ã –∏ –≤–∏–¥–µ–æ))")


@router.message(Command("report"))
async def report_cmd(message: Message):
    await message.answer("–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–ª—å–Ω–æ, –Ω–µ –ø—ã—Ç–∞–π—Å—è")


# @router.callback_query(F.data == "aga")
# async def aga(callback: CallbackQuery):
#     await callback.answer("–ø–æ–Ω—è—Ç–Ω–æ", show_alert=True)
#     await callback.message.edit_text("–ó–∞—á–µ–º –Ω–∞–∂–∞–ª?", reply_markup=kb.asd)
#
#
# @router.callback_query(F.data == "zxc")
# async def aga(callback: CallbackQuery):
#     await callback.answer("–ø–æ–Ω—è—Ç–Ω–æ", show_alert=True)
#
#
# @router.message(F.photo)
# async def get_photo_id(message: Message):
#     await message.answer_photo(photo=message.photo[-1].file_id, caption=f"id —Ñ–æ—Ç–æ: {message.photo[-1].file_id}")
