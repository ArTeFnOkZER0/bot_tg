from aiogram.filters import CommandStart, Command
from aiogram.types import Message, MessageReactionUpdated, PollAnswer
# CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
# from smth228.app import keyboards as kb
from smth228.app.middleware import LoggingMiddleware
from aiogram import Router, F, Bot


router = Router()

router.message.middleware(LoggingMiddleware())


class Reg(StatesGroup):
    name = State()
    number = State()


class Poll(StatesGroup):
    question = State()
    options = State()


last_poll_id: str | None = None
voters: set[str] = set()
user_react: set[str] = set()


# –∏
# —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å
# –∞–Ω–µ–∫–¥–æ—Ç(–Ω–∞–ø–∏—à–∏
# '—Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç')
# reply_markup=kb.settings
# reply_markup=kb.main
@router.message(CommandStart())
async def start_cmd(message: Message):
    if message.chat.type == "private":
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ üòé. –Ø —É–º–µ—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ç–≤–æ–∏–º–∏ –æ–ø—Ä–æ—Å–∞–º–∏ –∏ —Ä–µ–∞–∫—Ü–∏—è–º–∏ "
                             "–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.–ï—Å–ª–∏ –Ω–∞–π–¥–µ—à—å –æ—à–∏–±–∫–∏ –∂–º–∏ ----> /report")
# await message.answer("–ï—Å–ª–∏ –Ω–∞–π–¥–µ—à—å –æ—à–∏–±–∫–∏ –∂–º–∏ ----> /report")


@router.message_reaction()
async def reaction_handler(event: MessageReactionUpdated):
    user_r = event.user  # –∫—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é
    user_identifier = user_r.username or str(user_r.id)
    if user_identifier not in user_react:
        user_react.add(user_identifier)


@router.message(F.text == "+")
async def plus_handler(message: Message):
    user_plus = message.from_user  # –∫—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é
    user_identifier = user_plus.username or str(user_plus.id)
    if user_identifier not in user_react:
        user_react.add(user_identifier)


@router.message(Command("rstats"))
async def react_stats(message: Message, bot: Bot):
    if not await is_admin(message, bot):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    await message.answer(f"—Ä–µ–∞–∫—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏: {", ".join(user_react)}")
    user_react.clear()


async def is_admin(message: Message, bot: Bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º —á–∞—Ç–∞"""
    member = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
    return member.status in ("administrator", "creator")


@router.message(Command("poll"))
async def create_poll1(message: Message, state: FSMContext, bot: Bot):
    """–°–æ–∑–¥–∞—ë–º –æ–ø—Ä–æ—Å"""
    if message.chat.type not in ("group", "supergroup"):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
    if not await is_admin(message, bot):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    global last_poll_id
    last_poll_id = set()
    await state.set_state(Poll.question)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞.")


@router.message(Poll.question)
async def create_poll2(message: Message, state: FSMContext, bot: Bot):
    """–°–æ–∑–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞"""
    if not await is_admin(message, bot):
        await message.answer("–±–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∞")  # —É–±—Ä–∞—Ç—å –ø–æ—Ç–æ–º –Ω–µ –∑–∞–±—É–¥—å
        return
    await state.update_data(question=message.text)
    await state.set_state(Poll.options)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é(–±–æ–ª–µ–µ 2).")


@router.message(Poll.options)
async def create_poll3(message: Message, state: FSMContext, bot: Bot):
    """–°–æ–∑–¥–∞—ë–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ–ø—Ä–æ—Å–∞"""
    global last_poll_id, voters
    if not await is_admin(message, bot):
        await message.answer("–±–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∞")  # —É–±—Ä–∞—Ç—å –ø–æ—Ç–æ–º –Ω–µ –∑–∞–±—É–¥—å
        return
    if len(message.text.split(",")) < 2:
        await message.answer("–ö–∞–∫—É—é-—Ç–æ —Ö—Ä–µ–Ω—å —Ç—ã –≤–≤–µ–ª, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞–ø–∏—Å–∞–Ω–æ –∂–µ.")
        return
    await state.update_data(options=message.text.split(","))
    poll_data = await state.get_data()
    poll_msg = await bot.send_poll(
        chat_id=message.chat.id,
        question=poll_data["question"],
        options=poll_data["options"],
        is_anonymous=False
    )
    await state.clear()

    last_poll_id = poll_msg.poll.id
    voters = set()


@router.poll_answer()
async def handle_poll_answer(poll_answer: PollAnswer):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö"""
    global voters
    if poll_answer.poll_id == last_poll_id:
        user_identifier = poll_answer.user.username or str(poll_answer.user.id)
        voters.add(user_identifier)


@router.message(F.text == "/stats")
async def poll_stats(message: Message, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –æ–ø—Ä–æ—Å—É"""
    global last_poll_id, voters

    if not last_poll_id:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")
        return

    total = await bot.get_chat_member_count(message.chat.id)
    total -= 1
    not_voted = total - len(voters)

    percent_voted = (len(voters) / total) * 100 if total else 0
    percent_not = (not_voted / total) * 100 if total else 0

    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: {len(voters)} —á–µ–ª–æ–≤–µ–∫ ({percent_voted:.1f}%) ‚Üí {", ".join(voters)}\n"
        f"–ù–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: {not_voted} —á–µ–ª–æ–≤–µ–∫ ({percent_not:.1f}%)")


@router.message(Command("report"))
async def report_cmd(message: Message):
    if message.chat.type == "private":
        await message.answer("–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–ª—å–Ω–æ, –Ω–µ –ø—ã—Ç–∞–π—Å—è")
